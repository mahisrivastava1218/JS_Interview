ðŸ”¹ Dot Notation (.)
Used when property name is known and is a valid identifier (no spaces/symbols).


obj.name
ðŸ”¹ Bracket Notation ([])
Used when property is dynamic or has spaces/symbols.

obj[key] // dynamic key
ðŸ”¹ Arrays (Nested)
Always use bracket notation with indexes:


arr[0][1]
âœ… Tip:
Use dot when simple, bracket when dynamic or special!


function updateProperty(obj, propName, str) {
  // You only need to implement this function.
  obj[propName] = str;
  return (obj[propName]);

  //  obj.propName = str;  // Incorrect: propName is treated as a literal property name
  // return obj.propName; // incorrect Returns the value of the property named "propName"

  // dotnotation is ues in update property when we know the vexact value    else use bracket;


function deleteProperty(obj, propName) {
  // You only need to implement this function.
  //keyword delete obj[propName]
  delete obj[propName];
  return obj;
}


function getAge(obj) {
  
  // return obj["age"];
  return obj.age;
  // age is a property not a variable use as a string;
  // return obj.age;
  // here we known the value of age can use dot notation
}

//nested obj
âœ… Use dot notation when:
You know the property name in advance.

The property name is a valid identifier (no spaces, starts with a letter, etc.).


const obj = { user: { name: "Mahi" } };
console.log(obj.user.name); // âœ… Dot notation
âœ… Use bracket notation when:
The key is dynamic (e.g., comes from a variable).

The key has spaces, special characters, or starts with a number.

You're working with arrays (index-based access).

const obj = { "user name": "Mahi" };
console.log(obj["user name"]); // âœ… Bracket notation

const key = "name";
console.log(obj[key]); // âœ… Dynamic key access
function getFirstItem() {
  const shoppingCart = {1: "Apple", 2: "Orange"};
  return shoppingCart[1];
  // return shoppingCart.1;  //incoreect 1,2 are not valid identifiers
}
