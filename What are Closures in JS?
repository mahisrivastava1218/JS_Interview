 What is a Closure?
A closure is created when a function remembers variables from its outer scope, even after that outer function has finished executing.

ğŸ§  Example:
function outer() {
  let name = "Mahi";

  function inner() {
    console.log(name); // ğŸ”¥ accesses outer variable
  }

  return inner;
}

const greet = outer();
greet(); // ğŸ‘‰ Outputs: Mahi
Here, inner() is a closure.
Even though outer() is done, inner() still remembers name.

ğŸ“Œ Why are Closures useful?
âœ… Data privacy (e.g., private variables)
âœ… Function factories
âœ… Maintaining state in async callbacks

A closure is when a function remembers variables from its lexical scope even after the outer function has returned.

