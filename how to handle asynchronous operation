🧠 Basic Definitions
✅ Synchronous:
Executes line-by-line, in order.

Each line waits for the previous one to finish.

console.log("Start");
console.log("Middle");
console.log("End");
🟰 Output:

Start
Middle
End
✅ Asynchronous:
Does not block the execution.

Certain operations (like API calls, timeouts) are deferred, and other code continues to run.

console.log("Start");
setTimeout(() => {
  console.log("Inside setTimeout");
}, 1000);
console.log("End");
🟰 Output:

Start
End
Inside setTimeout

⚙️ Real-World: How to Handle Asynchronous Operations
You can handle async operations using:

✅ 1. Callbacks (Old way, not preferred now)
function fetchData(callback) {
  setTimeout(() => {
    callback("Data received!");
  }, 1000);
}

fetchData((data) => {
  console.log(data);
});
✅ 2. Promises (Modern way)
function fetchData() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve("Data received!");
    }, 1000);
  });
}

fetchData().then((data) => {
  console.log(data);
});
✅ 3. Async/Await (Best & cleanest way)
function fetchData() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve("Data received!");
    }, 1000);
  });
}

async function main() {
  console.log("Start");
  const data = await fetchData(); // Waits here
  console.log(data);              // Runs after data is received
  console.log("End");
}

main();
🟰 Output:

Start
Data received!
End
🧪 Real-World Example: Fetching API Data
async function getUser() {
  try {
    const res = await fetch('https://jsonplaceholder.typicode.com/users/1');
    const data = await res.json();
    console.log(data.name);
  } catch (error) {
    console.error("Error:", error);
  }
}
getUser();
