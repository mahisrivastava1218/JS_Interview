Event Bubbling (default behavior)

When you click an element inside another element, the event bubbles up from the target element to its ancestors.

For example:

<div id="parent" style="background: lightblue; padding: 20px;">
  Parent Div
  <button id="child">Click Me</button>
</div>

<script>
document.getElementById("parent").addEventListener("click", () => {
  console.log("Parent Clicked!");
});

document.getElementById("child").addEventListener("click", () => {
  console.log("Child Clicked!");
});
</script>


ðŸ“Œ If you click the button:

Child Clicked!
Parent Clicked!


ðŸ‘‰ Because the click event bubbles up to the parent.

ðŸ”¹ Using event.stopPropagation()

If you donâ€™t want the event to bubble up, call stopPropagation() inside the childâ€™s event handler.

document.getElementById("child").addEventListener("click", (event) => {
  event.stopPropagation();  // ðŸš« stop bubbling
  console.log("Child Clicked (no parent trigger)!");
});


ðŸ“Œ Now, if you click the button:

Child Clicked (no parent trigger)!


ðŸ‘‰ The parentâ€™s event handler wonâ€™t run.

ðŸ”¹ When to Use

When you have nested elements with event listeners, but only want the inner elementâ€™s event to fire.

Useful in modals, dropdowns, accordions, and forms where clicking inside shouldnâ€™t close the outer container.

ðŸ”¹ Related Method

event.stopImmediatePropagation() â†’ stops bubbling and prevents other listeners on the same element from running.

Example:

button.addEventListener("click", e => {
  e.stopImmediatePropagation();
  console.log("First listener runs");
});

button.addEventListener("click", () => {
  console.log("Second listener will NOT run");
});


âœ… In short:

stopPropagation() = stop event from bubbling to parents.
stopImmediatePropagation() = stop bubbling + stop other listeners on the same element.
